# Little Professor

from random import randint

def main():
    # definition of level by call to get_level
    level = get_level()

    # defining empty list
    math_problems = []

    # generating ten mathematical problems and calculating their results
    for _ in range(10):
        x = generate_integer(level)
        y = generate_integer(level)
        solution = x + y 

        # appending a tuple containing the mathematical problems variables as well as the solution
        math_problems.append((x, y, solution))

    # initialising score with zero
    score = 0

    # looping through the mathematical problems
    for x, y, solution in math_problems:

        # initialising used tries with zero
        tries_used = 0

        # starting loop until three tries are used
        while tries_used <= 3: 
            # if the user used up all three tries printing the problem along the solution
            if tries_used == 3:
                print(f"{x} + {y} = {solution}")

                # breaking the while loop
                break

            # asking user for input typeforcing it to int
            answer = int(input(f"{x} + {y} = "))

            # checking if the users input is equal to the solution
            if answer == solution:
                # adding one to the score
                score += 1

                # breaking the while loop
                break

            else:
                # incrementing number of used tries
                tries_used += 1

                # printing unsucess 
                print("EEE")

    # printing score after all generated problems the user went through
    print("Score:", score)
        

def get_level():
    """
    Input loop reprompting the user if input is unexpected.

    Returns:
    int: A number between (inclusively) one and three.
    """

    # starting an infinite loop
    while True:
        # trying to input from the user typeforcing it to int
        try:
            level = int(input("Level: "))

        # passing by ValueError
        except ValueError:

            # reprompting user
            pass

        else:
            # checking if level is within expected range
            if level in range(1, 4):

                # returning level
                return level

            else:
                # reprompting the user
                pass


def generate_integer(level):
    """
    Generates random integers containing one, two or three decimal digits.

    Parameters:
    level (int): An integer within (inclusively) one and three. 

    Returns: 
    int: An integer randomly generated by random.randint()
    """

    # checking for level being within range
    if level not in range(1, 4):
        # raising exeption if level is not in range
        raise ValueError("level out of range.")

    # matching level for every possible and valid case
    match level:
    
        case 1:
            # generating an integer with one decimal digit
            return randint(1, 9)
            
        case 2:
            # generating an integer with two decimal digits
            return randint(10, 99)
            
        case 3:
            # generating an integer with three decimal digits
            return randint(100, 999)


if __name__ == "__main__":
    main()